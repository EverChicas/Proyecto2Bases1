-- CREAR CAJA
DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE CREAR_CAJA (IN CAJA INT,IN MONTO INT)
BEGIN
	INSERT INTO caja(Caja,Monto,Estado) VALUES(CAJA,MONTO,0);
END$$

DELIMITER //
CREATE PROCEDURE CAJA_ABRIR()
BEGIN
	SELECT * FROM caja WHERE caja.Estado = 0;
END//

-- ABRIR CAJA
DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `ABRIR_CAJA`(IN CAJA INT,IN USUARIO INT)
BEGIN
	SELECT @MONTO := caja.Monto 
    FROM caja 
    WHERE caja.Caja = Caja;
    
    UPDATE caja 
    SET Estado = 1 
    WHERE caja.Caja = CAJA;
	
    INSERT INTO abrir_caja(Fecha_Hora,Monto,Usuario,Caja)
    VALUES(CURRENT_TIMESTAMP(),@MONTO,USUARIO,CAJA);
END//

-- BUSCAR CAJA
DELIMITER //
CREATE PROCEDURE `BUSCAR_CAJA`(IN CAJA INT)
BEGIN
	SELECT * FROM caja WHERE caja.Caja = CAJA;
END//

-- CERRAR CAJA
DELIMITER //
CREATE PROCEDURE `CERRAR_CAJA`(IN CAJA INT,IN MONTO_NUMERO DOUBLE, IN MONTO_LETRA VARCHAR(100),IN OBSERVACIONES VARCHAR(100),IN USUARIO INT)
BEGIN
	UPDATE caja 
    SET Estado = 0 
    WHERE caja.Caja = CAJA;

	INSERT INTO cerrar_caja(Fecha_Hora,Monto_Numero,Monto_Letras,Observacion,Usuario_Usuario,Caja_Caja)
    VALUES(CURRENT_TIMESTAMP(),MONTO_NUMERO,MONTO_LETRA,OBSERVACIONES,USUARIO,CAJA);
END//

-- AGREGAR TIPO DE PAGO
USE `proyecto2bases1`;
DROP procedure IF EXISTS `AGREGAR_TIPO_PAGO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AGREGAR_TIPO_PAGO`(IN TIPO_PAGO VARCHAR(45))
BEGIN
	INSERT INTO tipo_pago(Nombre) VALUES(TIPO_PAGO);
END$$

DELIMITER ;

-- LISTA DE PAGOS
USE `proyecto2bases1`;
DROP procedure IF EXISTS `LISTA_PAGOS`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `LISTA_PAGOS`()
BEGIN
	SELECT * FROM tipo_pago;
END$$

DELIMITER ;

-- INGRESAR EGRESO
USE `proyecto2bases1`;
DROP procedure IF EXISTS `INGRESAR_EGRESO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INGRESAR_EGRESO`(IN MONTO DOUBLE,IN NO_RECIBO VARCHAR(45),IN TIPO_PAGO INT(11),IN USUARIO INT(11),IN CAJA INT(11))
BEGIN
	SELECT @FECHA := CURRENT_TIMESTAMP(); 

	SELECT @MONTO_CAJA := caja.Monto 
    FROM caja 
    WHERE caja.Caja = CAJA;

    UPDATE caja 
    SET Monto = @MONTO_CAJA - MONTO 
    WHERE caja.Caja = CAJA;
    
    INSERT INTO movimiento(Fecha_Hora,Descripcion,Monto,Saldo_Caja,Usuario,Caja)
    VALUES(@FECHA,'PAGO DE SERVICIO',MONTO,@MONTO_CAJA - MONTO,USUARIO,CAJA);

	SELECT @ID_MOVIMIENTO := movimiento.Movimiento
    FROM movimiento
    WHERE movimiento.Fecha_Hora = @FECHA;

	INSERT INTO log(Fecha_Hora,Descripcion,Monto_Movimiento,Movimiento,Usuario)
    VALUES(@FECHA,'PAGO DE SERVICIO',MONTO,@ID_MOVIMIENTO,USUARIO);

	INSERT INTO egreso(Fecha_Hora,Monto,No_recibo,Tipo_Pago,Usuario,Caja)
    VALUES(@FECHA,MONTO,NO_RECIBO,TIPO_PAGO,USUARIO,CAJA);
END$$

DELIMITER ;

-- LISTA DE MOVIMIENTOS
DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `LISTA_MOVIMIENTOS` ()
BEGIN
	SELECT * FROM movimiento;
END$$

DELIMITER ;

-- MOVIMIENTOS POR FECHA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `MOVIMIENTO_FECHA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `MOVIMIENTO_FECHA` (IN FECHA VARCHAR(45))
BEGIN
	SELECT * 
    FROM movimiento 
    WHERE DATE(movimiento.Fecha_Hora) = '2019-05-09';
END$$

DELIMITER ;

-- CLIENTES
USE `proyecto2bases1`;
DROP procedure IF EXISTS `CLIENTES`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `CLIENTES` ()
BEGIN
	SELECT * FROM cliente;
END$$

DELIMITER ;

-- NUEVA FACTURA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `NUEVA_FACTURA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `NUEVA_FACTURA`(IN FECHA varchar(100),IN CLIENTE INT(11), IN NIT INT(11),IN TOTAL INT(11),IN IVA INT(11))
BEGIN
	
	INSERT INTO factura(Fecha_Hora,Cliente,NIT,Total,IVA_Venta)
    VALUES(FECHA,CLIENTE,NIT,TOTAL,IVA);
END$$

DELIMITER ;

-- AGREGAR DETALLE DE FACTURA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `NUEVO_DETALLE_FACTURA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `NUEVO_DETALLE_FACTURA`(IN FACTURA INT(11),IN CLIENTE INT(11),IN PRECIO DOUBLE,IN CANTIDAD INT(11),IN PRODUCTO INT(11))
BEGIN
	UPDATE inventario
    SET Unidades_Disponibles = inventario.Unidades_Disponibles - CANTIDAD
    WHERE inventario.Producto = PRODUCTO;

	INSERT INTO detalle(Factura,Cliente,Precio_Unidad,Cantidad,Producto)
    VALUES(FACTURA,CLIENTE,PRECIO,CANTIDAD,PRODUCTO);
END$$

DELIMITER ;

-- RETORNAR FACTURA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `RETORNAR_FACTURA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `RETORNAR_FACTURA`(IN FECHA varchar(100))
BEGIN
	SELECT *
    FROM factura
    WHERE factura.Fecha_Hora = FECHA;
END$$

DELIMITER ;

-- GUARDAR VENTA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `GUARDAR_VENTA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `GUARDAR_VENTA` (IN NIT INT(11),IN NOMBRE_CLIENTE VARCHAR(100),IN IVA DOUBLE,IN PAGADO DOUBLE,IN USUARIO INT(11),IN CAJA INT(11),IN FACTURA INT(11),IN FECHA VARCHAR(100))
BEGIN
	SELECT @MONTO_CAJA := caja.Monto 
    FROM caja 
    WHERE caja.Caja = CAJA;

    UPDATE caja 
    SET Monto = @MONTO_CAJA + PAGADO 
    WHERE caja.Caja = CAJA;
    
    INSERT INTO movimiento(Fecha_Hora,Descripcion,Monto,Saldo_Caja,Usuario,Caja)
    VALUES(FECHA,'VENTA',PAGADO,@MONTO_CAJA + PAGADO,USUARIO,CAJA);

	SELECT @ID_MOVIMIENTO := movimiento.Movimiento
    FROM movimiento
    WHERE movimiento.Fecha_Hora = FECHA;

	INSERT INTO log(Fecha_Hora,Descripcion,Monto_Movimiento,Movimiento,Usuario)
    VALUES(FECHA,'VENTA',PAGADO,@ID_MOVIMIENTO,USUARIO);

	INSERT INTO venta(NIT,Nombre_Cliente,IVA,Monto_Pagado,Usuario,Caja,Factura)
    VALUES(NIT,NOMBRE_CLIENTE,IVA,PAGADO,USUARIO,CAJA,FACTURA);
    
END$$

DELIMITER ;

-- MAYOR VENTA DEL DIA
USE `proyecto2bases1`;
DROP procedure IF EXISTS `MAYOR_VENTA_DIA`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `MAYOR_VENTA_DIA` ()
BEGIN
		SELECT * 
		FROM venta AS v
		WHERE v.Factura IN ( 
			SELECT f.Factura
			FROM Factura AS f
			WHERE DATE(f.Fecha_Hora) = DATE(CURRENT_TIMESTAMP())
			AND f.Total IN (
				SELECT MAX(f.Total)
				FROM Factura AS f
				WHERE DATE(f.Fecha_Hora) = DATE(CURRENT_TIMESTAMP())
    )
);
END$$

DELIMITER ;

-- HISTORIAL DE CLIENTE
USE `proyecto2bases1`;
DROP procedure IF EXISTS `HISTORIAL_CLIENTE`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `HISTORIAL_CLIENTE` (IN CLIENTE INT(11))
BEGIN
	SELECT *
    FROM factura AS F
    WHERE F.Cliente = CLIENTE;
END$$

DELIMITER ;