update-package Microsoft.CodeDom.Providers.DotNetCompilerPlatform -r

DELIMITER //
CREATE PROCEDURE LOGIN_USUARIO(IN USER INTEGER, IN PASS VARCHAR(50))
BEGIN
SELECT *FROM usuario 
WHERE Usuario = USER
and Password = PASS;
END//

--http://localhost:61291/
DROP PROCEDURE ROLES_USUARIO;
DELIMITER //
CREATE PROCEDURE ROLES_USUARIO()
BEGIN
	SELECT R.NOMBRE FROM ROL_USUARIO R;
END//


DROP FUNCTION ID_ROL_USUARIO;
DELIMITER //
CREATE FUNCTION ID_ROL_USUARIO(NOMBRE_ROL VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT R.ROL_USUARIO INTO ID FROM ROL_USUARIO R
	WHERE R.NOMBRE = NOMBRE_ROL;
	RETURN ID;
END//

DROP FUNCTION EXISTE_USUARIO;
DELIMITER //
CREATE FUNCTION EXISTE_USUARIO(USUARIO_ID INTEGER)
RETURNS INT(11)
BEGIN
	DECLARE VALOR INT DEFAULT -1;
	SELECT U.USUARIO INTO VALOR FROM USUARIO U
	WHERE U.USUARIO = USUARIO_ID;
	RETURN VALOR;
END//

DROP PROCEDURE CREAR_USUARIO;
	DELIMITER //
	CREATE PROCEDURE CREAR_USUARIO(NOMBRE_P VARCHAR(100), DIRECCION_P VARCHAR(250), TELEFONO_P VARCHAR(15), CORREO_P VARCHAR(100), USUARIO_P INTEGER, PASSWORD_P VARCHAR(250), ROL_USUARIO_P VARCHAR(45))
	BEGIN
		DECLARE ROL_USUARIO_ID INTEGER DEFAULT 0;
		DECLARE EXISTE INTEGER;
	    DECLARE RESULTADO INTEGER DEFAULT 0;
	    SET EXISTE = EXISTE_USUARIO(USUARIO_P);
	    IF EXISTE = -1 THEN
			SET ROL_USUARIO_ID = ID_ROL_USUARIO(ROL_USUARIO_P);
			INSERT INTO USUARIO(USUARIO, NOMBRE, DIRECCION, TELEFONO, CORREO, PASSWORD, ROL_USUARIO)
	        VALUES (USUARIO_P, NOMBRE_P, DIRECCION_P, TELEFONO_P, CORREO_P, PASSWORD_P, ROL_USUARIO_ID);
	        SET RESULTADO = 1;
		END IF;
	    SELECT RESULTADO;
	END//

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------- CREAR TIPO_CATEGORIA (DEPORTES, FICCIÓN, ACCIÓN)
DELIMITER //
CREATE FUNCTION ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT T.TIPO_CATEGORIA INTO ID FROM TIPO_CATEGORIA T
	WHERE T.NOMBRE = NOMBRE_CATEGORIA;
	RETURN ID;
END//

DELIMITER //
CREATE PROCEDURE CREAR_TIPO_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
BEGIN
	DECLARE EXISTE INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	SET EXISTE = ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA);
	IF EXISTE = -1 THEN
		INSERT INTO TIPO_CATEGORIA(NOMBRE) VALUES (NOMBRE_CATEGORIA);
		SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- CREAR PRODUCTO 
DELIMITER //
CREATE FUNCTION ID_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(100))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT P.PRODUCTO INTO ID FROM PRODUCTO P
	WHERE P.NOMBRE = NOMBRE_PRODUCTO;
	RETURN ID;
END//

DELIMITER //
CREATE PROCEDURE CREAR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(100), PRECIO_PRODUCTO DOUBLE, U_DISPONIBLES INTEGER)
BEGIN
	DECLARE EXISTE INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	DECLARE ID INTEGER;
	SET EXISTE = ID_PRODUCTO(NOMBRE_PRODUCTO);
	IF EXISTE = -1 THEN
		INSERT INTO PRODUCTO(NOMBRE, PRECIO) VALUES (NOMBRE_PRODUCTO, PRECIO_PRODUCTO);
		SET ID = ID_PRODUCTO(NOMBRE_PRODUCTO);
		INSERT INTO INVENTARIO(UNIDADES_DISPONIBLES, PRODUCTO) VALUES (U_DISPONIBLES, ID);
		SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------  ASIGNAR PRODUCTO A CATEGORIA
DELIMITER //
CREATE PROCEDURE PRODUCTOS()
BEGIN
	SELECT *FROM PRODUCTO;
END//

DELIMITER //
CREATE PROCEDURE TIPO_CATEGORIAS()
BEGIN
	SELECT *FROM TIPO_CATEGORIA;
END//

DELIMITER //
CREATE FUNCTION EXISTE_PRODUCTO_ASIGNADO_EN_CATEGORIA(NOMBRE_PRODUCTO VARCHAR(100), NOMBRE_CATEGORIA VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID_PR INTEGER;
	DECLARE ID_TC INTEGER;
	DECLARE EXISTE_ASIGNADO INTEGER DEFAULT -1;
	SET ID_PR = ID_PRODUCTO(NOMBRE_PRODUCTO);
	SET ID_TC = ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA);
	SELECT CA.PRODUCTO INTO EXISTE_ASIGNADO FROM CATEGORIA CA
	WHERE CA.PRODUCTO = ID_PR
	AND CA.TIPO_CATEGORIA = ID_TC;
	IF EXISTE_ASIGNADO = -1 THEN
		INSERT INTO CATEGORIA(PRODUCTO, TIPO_CATEGORIA) VALUES (ID_PR, ID_TC);
	END IF;
	RETURN EXISTE_ASIGNADO;
END//

DELIMITER //
CREATE PROCEDURE AGREGAR_PRODUCTO_EN_CATEGORIA(NOMBRE_PRODUCTO VARCHAR(100), NOMBRE_CATEGORIA VARCHAR(45))
BEGIN
	DECLARE EXISTE_ASIGNADO INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	SET EXISTE_ASIGNADO = EXISTE_PRODUCTO_ASIGNADO_EN_CATEGORIA(NOMBRE_PRODUCTO, NOMBRE_CATEGORIA);
	IF EXISTE_ASIGNADO = -1 THEN
		 SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- PRODUCTOS POR CATEGORIA
DELIMITER //
CREATE PROCEDURE PRODUCTOS_POR_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
BEGIN
	DECLARE ID INTEGER;
	SET ID = ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA);
	SELECT PR.* FROM
	TIPO_CATEGORIA TC, PRODUCTO PR, CATEGORIA CA
	WHERE TC.TIPO_CATEGORIA = ID
	AND TC.TIPO_CATEGORIA = CA.TIPO_CATEGORIA
	AND PR.PRODUCTO = CA.PRODUCTO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- DETALLES POR PRODUCTO
DELIMITER //
CREATE PROCEDURE DETALLES_POR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(45))
BEGIN
	DECLARE ID INTEGER;
	SET ID = ID_PRODUCTO(NOMBRE_PRODUCTO);
	SELECT PR.*, I.UNIDADES_DISPONIBLES FROM PRODUCTO PR, INVENTARIO I
	WHERE PR.PRODUCTO = ID
	AND PR.PRODUCTO = I.PRODUCTO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- INVENTARIO GENERAL
DELIMITER //
CREATE PROCEDURE INVENTARIO_GENERAL()
BEGIN
	SELECT PR.*, I.UNIDADES_DISPONIBLES FROM PRODUCTO PR, INVENTARIO I
	WHERE PR.PRODUCTO = I.PRODUCTO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- PRODUCTOS SIN EXISTENCIA
DELIMITER //
CREATE PROCEDURE PRODUCTOS_SIN_EXISTENCIA()
BEGIN
	SELECT PR.*, I.UNIDADES_DISPONIBLES FROM PRODUCTO PR, INVENTARIO I
	WHERE PR.PRODUCTO = I.PRODUCTO
	AND I.UNIDADES_DISPONIBLES = 0;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- ELIMINAR TIPO CATEGORIA
DELIMITER //
CREATE PROCEDURE ELIMINAR_TIPO_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
BEGIN
	DECLARE ID INTEGER;
	SET ID = ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA);
	DELETE FROM tipo_categoria WHERE TIPO_CATEGORIA = ID;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- AGREGAR NUEVO CLIENTE
DELIMITER //
CREATE FUNCTION ID_CLIENTE(DPI_P INTEGER)
RETURNS INT(11)
BEGIN
	DECLARE ID INTEGER DEFAULT -1;
	SELECT C.DPI INTO ID FROM CLIENTE C
	WHERE C.DPI = DPI_P;
	RETURN ID;
END//

DELIMITER //
CREATE PROCEDURE CREAR_CLIENTE(DPI_P INTEGER, NOMBRE_CLIENTE_P VARCHAR(100), NIT_P INTEGER, TELEFONO_P VARCHAR(15), CORREO_P VARCHAR(100))
BEGIN
	DECLARE EXISTE INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	SET EXISTE = ID_CLIENTE(DPI_P);
	IF EXISTE = -1 THEN
		INSERT INTO CLIENTE(DPI, NOMBRE, NIT, TELEFONO, CORREO) VALUES (DPI_P, NOMBRE_CLIENTE_P, NIT_P, TELEFONO_P, CORREO_P);
		SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- MODIFICANDO CLIENTE
DELIMITER //
CREATE PROCEDURE LISTADO_CLIENTES()
BEGIN
	SELECT *FROM CLIENTES;
END//

DELIMITER //
CREATE PROCEDURE MODIFICAR_CLIENTE(DPI_P INTEGER, NOMBRE_CLIENTE_P VARCHAR(100), NIT_P INTEGER, TELEFONO_P VARCHAR(15), CORREO_P VARCHAR(100))
BEGIN
	DECLARE ID INTEGER;
	UPDATE CLIENTE SET NOMBRE = NOMBRE_CLIENTE_P, NIT = NIT_P, TELEFONO = TELEFONO_P, CORREO = CORREO_P
	WHERE DPI = DPI_P;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- ELIMINANDO CLIENTE
DELIMITER //
CREATE PROCEDURE ELIMINAR_CLIENTE(DPI_P INTEGER)
BEGIN
	DELETE FROM	CLIENTE WHERE DPI = DPI_P;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- MODIFICAR PRODUCTO
DELIMITER //
CREATE PROCEDURE MODIFICAR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(45), PRECIO_PRODUCTO DOUBLE, UNIDADES_DISPONIBLES_P INTEGER)
BEGIN
	DECLARE ID INTEGER;
	SET ID = ID_PRODUCTO(NOMBRE_PRODUCTO);
	UPDATE PRODUCTO SET PRECIO = PRECIO_PRODUCTO
	WHERE PRODUCTO = ID;
	UPDATE INVENTARIO SET UNIDADES_DISPONIBLES = UNIDADES_DISPONIBLES_P
	WHERE PRODUCTO = ID;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- AGREGAR DESCUENTO A PRODUCTO
DELIMITER //
CREATE PROCEDURE AGREGAR_DESCUENTO_A_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(45), FECHA_I VARCHAR(19), FECHA_F VARCHAR(19), PORCENTAJE INTEGER)
BEGIN
	DECLARE ID INTEGER;
	DECLARE EXISTE_DESCUENTO INTEGER DEFAULT -1;
	DECLARE RESULTADO INTEGER DEFAULT 0;
    DECLARE CONVERT_FFCHA_I DATETIME;
    DECLARE CONVERT_FECHA_F DATETIME;
    SET CONVERT_FFCHA_I = CONVERT(FECHA_I, DATETIME);
    SET CONVERT_FECHA_F = CONVERT(FECHA_F, DATETIME);
	SET ID = ID_PRODUCTO(NOMBRE_PRODUCTO);
	
	IF CONVERT_FECHA_F < NOW() THEN
		INSERT INTO DESCUENTO(FECHA_INICIO, FECHA_FIN, PORCENTAJE_DESCUENTO, PRODUCTO) VALUES (CONVERT_FFCHA_I, CONVERT_FECHA_F, PORCENTAJE, ID);
		SET RESULTADO = 1;
	ELSE
		SELECT D.PRODUCTO INTO EXISTE_DESCUENTO FROM DESCUENTO D
		WHERE D.PRODUCTO = ID
		AND D.FECHA_FIN > NOW();
		IF EXISTE_DESCUENTO = -1 THEN
			INSERT INTO DESCUENTO(FECHA_INICIO, FECHA_FIN, PORCENTAJE_DESCUENTO, PRODUCTO) VALUES (CONVERT_FFCHA_I, CONVERT_FECHA_F, PORCENTAJE, ID);
			SET RESULTADO = 1;
		END IF;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- PRODUCTOS CON DESCUENTO
DELIMITER //
CREATE PROCEDURE LISTADO_PRODUCTOS_CON_DESCUENTO()
BEGIN
	SELECT D.DESCUENTO, D.FECHA_INICIO, D.FECHA_FIN, D.PORCENTAJE_DESCUENTO, P.NOMBRE
	FROM PRODUCTO P, DESCUENTO D
	WHERE P.PRODUCTO = D.PRODUCTO;
END

