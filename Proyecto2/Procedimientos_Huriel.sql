
---------------------------------------------------------------------- PROVEEDORES--------------------------------------------------
-- FUNCION QUE ME DEVUELVE -1 SI EL PROVEEDOR NO EXISTE, SI EXISTE ME DEVUELVE SU ID DE PROVEEDOR
DELIMITER //
CREATE FUNCTION EXISTE_PROVEEDOR(NOMBRE_P  VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE VALOR INT DEFAULT -1;
	SELECT P.PROVEEDOR INTO VALOR FROM PROVEEDOR P
	WHERE P.NOMBRE = NOMBRE_P;
	RETURN VALOR;
END//


DROP PROCEDURE AGREGAR_PROVEEDOR;
-- PROCEDIMIENTO PARA AGREGAR PROVEEDORES (YA VALIDO QUE NO EXISTA)
DELIMITER //
CREATE PROCEDURE AGREGAR_PROVEEDOR(NOMBRE_P VARCHAR(45), DIRECCION_P VARCHAR(250), CORREO_P VARCHAR(100), TELEFONO_P VARCHAR(15))
BEGIN
	DECLARE EXISTE INTEGER;
    DECLARE RESULTADO INTEGER DEFAULT 0;
    SET EXISTE = EXISTE_PROVEEDOR(NOMBRE_P);
    IF EXISTE = -1 THEN
		INSERT INTO PROVEEDOR(NOMBRE, DIRECCION, CORREO, TELEFONO)
        VALUES (NOMBRE_P, DIRECCION_P, CORREO_P, TELEFONO_P);
        SET RESULTADO = 1;
	END IF;
    SELECT RESULTADO;
END//

-- OBTIENEN LOS PROVEEDORES CON TODOS SUS ATRIBUTOS
DROP PROCEDURE PROVEEDORES;

DELIMITER //
CREATE PROCEDURE PROVEEDORES()
BEGIN
	SELECT * FROM PROVEEDOR;
END//




DROP PROCEDURE GET_PROVEEDOR;
-- SOLICITAR UN PROVEEDOR
DELIMITER //
CREATE PROCEDURE GET_PROVEEDOR(PROVEEDOR_P INT(11))
BEGIN
	SELECT * FROM PROVEEDOR
	WHERE PROVEEDOR = PROVEEDOR_p;
END//



DROP PROCEDURE MODIFICAR_PROVEEDOR;
-- MODIFICAR UN PROVEEDOR
DELIMITER //
CREATE PROCEDURE MODIFICAR_PROVEEDOR(PROVEEDOR_P INT(11), NOMBRE_P VARCHAR(45), DIRECCION_P VARCHAR(250), CORREO_P VARCHAR(100), TELEFONO_P VARCHAR(15))
BEGIN
	UPDATE PROVEEDOR 
	SET NOMBRE = NOMBRE_P, DIRECCION = DIRECCION_P, CORREO = CORREO_P,TELEFONO = TELEFONO_P
	WHERE PROVEEDOR = PROVEEDOR_P;
END//


DROP PROCEDURE ELIMINAR_PROVEEDOR;
-- ELIMIAR UN PROVEEDOR
DELIMITER //
CREATE PROCEDURE ELIMINAR_PROVEEDOR(PROVEEDOR_P INT(11))
BEGIN
    DELETE FROM COMPRA
	WHERE PROVEEDOR = PROVEEDOR_P;
	DELETE FROM PROVEEDOR
	WHERE PROVEEDOR = PROVEEDOR_P;
END//

---------------------------------------------------------------------- COMPRAS A PROVEEDORES ----------------------------------------------------
DROP PROCEDURE ACTUALIZAR_UNIDADES_DISPONIBLES;
DELIMITER //
CREATE PROCEDURE ACTUALIZAR_UNIDADES_DISPONIBLES(PRODUCTO_P INT(11), CANTIDAD INT(11))
BEGIN
	UPDATE INVENTARIO INV, PRODUCTO PRO
	SET INV.UNIDADES_DISPONIBLES = INV.UNIDADES_DISPONIBLES + CANTIDAD 
	WHERE INV.PRODUCTO = PRO.PRODUCTO
	AND PRO.PRODUCTO = PRODUCTO_P;
END//

-- AGREGAR COMPRA A PROVEEDORES
 USE `proyecto2bases1`;
DROP procedure IF EXISTS `AGREGAR_COMPRA`;

CREATE DEFINER=`root`@`localhost` PROCEDURE `AGREGAR_COMPRA`(IN PRECIO_UNITARIO_P DOUBLE, IN VALOR_COMPRA_P DOUBLE, IN CANTIDAD INT(11), IN NO_FACTURA_P INT(11), IN PROVEEDOR_P INT(11), IN USUARIO_P INT(11), IN PRODUCTO_P INT(11))
BEGIN
	SELECT @FECHA := CURRENT_TIMESTAMP(); 
	-- ACTUALIZANDO LAS UNIDADES DISPONIBLES DEL PRODUCTO
	CALL proyecto2bases1.ACTUALIZAR_UNIDADES_DISPONIBLES(PRODUCTO_P, CANTIDAD);
    -- INSERTANDO EN LA TABLA COMPRA
    INSERT INTO COMPRA(FECHA, PRECIO_UNITARIO, VALOR_COMPRA, CANTIDAD, NO_FACTURA, PROVEEDOR, USUARIO, PRODUCTO)
    VALUES (@FECHA, PRECIO_UNITARIO_P, VALOR_COMPRA_P, CANTIDAD, NO_FACTURA_P, PROVEEDOR_P, USUARIO_P, PRODUCTO_P);

    -- INSERTANDO EN LA TABLA MOVIMIENTO    
    select @ID_CAJA := abrir_caja.Caja from abrir_caja 
	where abrir_caja.Usuario = USUARIO_P
	ORDER BY abrir_caja.Fecha_Hora desc
	limit 1; 
    
    SELECT @MONTO_CAJA := caja.Monto 
    FROM caja 
    WHERE caja.Caja = @ID_CAJA;

    UPDATE caja 
    SET Monto = @MONTO_CAJA - MONTO 
    WHERE caja.Caja = @ID_CAJA;
    
    INSERT INTO movimiento(Fecha_Hora,Descripcion,Monto,Saldo_Caja,Usuario,Caja)
    VALUES(@FECHA,CONCAT("Compra de productos factura No.", NO_FACTURA_P),VALOR_COMPRA_P,@MONTO_CAJA - VALOR_COMPRA_P,USUARIO_P,@ID_CAJA);

	-- INSERTANDO EN LA TABLA LOG
	SELECT @ID_MOVIMIENTO := movimiento.Movimiento
    FROM movimiento
    WHERE movimiento.Fecha_Hora = @FECHA;

	INSERT INTO log(Fecha_Hora,Descripcion,Monto_Movimiento,Movimiento,Usuario)
    VALUES(@FECHA,CONCAT("Compra de productos factura No.", NO_FACTURA_P),VALOR_COMPRA_P, @ID_MOVIMIENTO, USUARIO_P);
    
	INSERT INTO egreso(Fecha_Hora,Monto,No_recibo,Tipo_Pago,Usuario,Caja)
    VALUES(@FECHA,VALOR_COMPRA_P,NO_FACTURA_P,1,USUARIO_P,@ID_CAJA);
END


------------------------------------------------------- LOG DE MOVIMIENTOS ----------------------------------------------------
DROP PROCEDURE LOG_GENERAL;
-- OBTIENEN TODOS LOS MOVIMIENTO QUE SE HAN REALIZADO
DELIMITER //
CREATE PROCEDURE LOG_GENERAL()
BEGIN
	SELECT * FROM LOG;
END//

DROP PROCEDURE LOG_MENSUAL;
DELIMITER //
CREATE PROCEDURE LOG_MENSUAL(MES INT(11), ANIO INT(11))
BEGIN
	SELECT * FROM LOG 
    WHERE MONTH(FECHA_HORA) = MES AND YEAR(FECHA_HORA) = ANIO;
END//


DROP PROCEDURE LOG_POR_FECHA;
DELIMITER //
CREATE PROCEDURE LOG_POR_FECHA(FECHA DATETIME)
BEGIN
	SELECT * FROM LOG 
    WHERE DATE(FECHA_HORA) = DATE(FECHA);
END//
