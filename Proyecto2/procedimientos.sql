DELIMITER //
CREATE PROCEDURE AGREGAR_ROL_USUARIO(IN NOMBRE VARCHAR(45))
BEGIN
INSERT INTO Rol_Usuario(Nombre) values(NOMBRE);
END//

-- LOGIN
USE `proyecto2bases1`;
DROP procedure IF EXISTS `LOGIN_USUARIO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `LOGIN_USUARIO` (IN ID INT,IN PASS VARCHAR(250))
BEGIN
SELECT * FROM usuario
WHERE usuario.Usuario = ID AND usuario.Password = PASS;
END$$
DELIMITER ;


-- OBTENER EL ID DEL ROL_USUARIO POR NOMBRE	
DELIMITER //
CREATE PROCEDURE ID_ROL_USUARIO(IN NOMBRE_ROL VARCHAR(50))
BEGIN
SELECT R.ROL_USUARIO FROM ROL_USUARIO R 
WHERE R.NOMBRE = NOMBRE_ROL;
END//
-- CALL ID_ROL_USUARIO('Administrador'); DEVUELVE 1


DROP FUNCTION ID_ROL_USUARIO;
--FUNCION QUE ME DEVUELVE EL ID DE UN ROL EN BASE A SU NOMBRE
DELIMITER //
CREATE FUNCTION ID_ROL_USUARIO(NOMBRE_ROL VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT R.ROL_USUARIO INTO ID FROM ROL_USUARIO R
	WHERE R.NOMBRE = NOMBRE_ROL;
	RETURN ID;
END//

DROP FUNCTION EXISTE_USUARIO;
-- FUNCION QUE ME DEVUELVE -1 SI EL USUARIO NO EXISTE, SI EXISTE ME DEVUELVE SU USUARIO
DELIMITER //
CREATE FUNCTION EXISTE_USUARIO(USUARIO_ID INTEGER)
RETURNS INT(11)
BEGIN
	DECLARE VALOR INT DEFAULT -1;
	SELECT U.USUARIO INTO VALOR FROM USUARIO U
	WHERE U.USUARIO = USUARIO_ID;
	RETURN VALOR;
END//

DROP PROCEDURE CREAR_USUARIO;
-- PROCEDIMIENTO PARA CREAR USUARIO (YA VALIDO QUE NO EXISTA)
DELIMITER //
CREATE PROCEDURE CREAR_USUARIO(NOMBRE_P VARCHAR(100), DIRECCION_P VARCHAR(250), TELEFONO_P VARCHAR(15), CORREO_P VARCHAR(100), USUARIO_P INTEGER, PASSWORD_P VARCHAR(250), ROL_USUARIO_P VARCHAR(45))
BEGIN
	DECLARE ROL_USUARIO_ID INTEGER DEFAULT 0;
	DECLARE EXISTE INTEGER;
    DECLARE RESULTADO INTEGER DEFAULT 0;
    SET EXISTE = EXISTE_USUARIO(USUARIO_P);
    IF EXISTE = -1 THEN
		SET ROL_USUARIO_ID = ID_ROL_USUARIO(ROL_USUARIO_P);
		INSERT INTO USUARIO(USUARIO, NOMBRE, DIRECCION, TELEFONO, CORREO, PASSWORD, ROL_USUARIO)
        VALUES (USUARIO_P, NOMBRE_P, DIRECCION_P, TELEFONO_P, CORREO_P, PASSWORD_P, ROL_USUARIO_ID);
        SET RESULTADO = 1;
	END IF;
    SELECT RESULTADO;
END//


DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE CREAR_CAJA (IN CAJA INT,IN MONTO DOUBLE	)
BEGIN
	INSERT INTO caja(Caja,Monto,Estado) VALUES(CAJA,MONTO,0);
END$$

DELIMITER //
CREATE PROCEDURE CAJA_ABRIR()
BEGIN
	SELECT * FROM caja WHERE caja.Estado = 0;
END//


DELIMITER //
CREATE DEFINER=`root`@`localhost` PROCEDURE `ABRIR_CAJA`(IN CAJA INT,IN USUARIO INT)
BEGIN
	SELECT @MONTO := caja.Monto 
    FROM caja 
    WHERE caja.Caja = Caja;
    
    UPDATE caja 
    SET Estado = 1 
    WHERE caja.Caja = CAJA;
	
    INSERT INTO abrir_caja(Fecha_Hora,Monto,Usuario,Caja)
    VALUES(CURRENT_TIMESTAMP(),@MONTO,USUARIO,CAJA);
END//

DELIMITER //
CREATE PROCEDURE `BUSCAR_CAJA`(IN CAJA INT)
BEGIN
	SELECT * FROM caja WHERE caja.Caja = CAJA;
END//

DELIMITER //
CREATE PROCEDURE `CERRAR_CAJA`(IN CAJA INT,IN MONTO_NUMERO DOUBLE, IN MONTO_LETRA VARCHAR(100),IN OBSERVACIONES VARCHAR(100),IN USUARIO INT)
BEGIN
	UPDATE caja 
    SET Estado = 0 
    WHERE caja.Caja = CAJA;

	INSERT INTO cerrar_caja(Fecha_Hora,Monto_Numero,Monto_Letras,Observacion,Usuario_Usuario,Caja_Caja)
    VALUES(CURRENT_TIMESTAMP(),MONTO_NUMERO,MONTO_LETRA,OBSERVACIONES,USUARIO,CAJA);
END//

-- AGREGAR TIPO DE PAGO
USE `proyecto2bases1`;
DROP procedure IF EXISTS `AGREGAR_TIPO_PAGO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AGREGAR_TIPO_PAGO`(IN TIPO_PAGO VARCHAR(45))
BEGIN
	INSERT INTO tipo_pago(Nombre) VALUES(TIPO_PAGO);
END$$

DELIMITER ;

-- LISTA DE PAGOS
USE `proyecto2bases1`;
DROP procedure IF EXISTS `LISTA_PAGOS`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `LISTA_PAGOS`()
BEGIN
	SELECT * FROM tipo_pago;
END$$

DELIMITER ;

-- INGRESAR EGRESO
USE `proyecto2bases1`;
DROP procedure IF EXISTS `INGRESAR_EGRESO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `INGRESAR_EGRESO`(IN MONTO DOUBLE,IN NO_RECIBO VARCHAR(45),IN TIPO_PAGO INT(11),IN USUARIO INT(11),IN CAJA INT(11))
BEGIN
	SELECT @FECHA := CURRENT_TIMESTAMP(); 

	SELECT @MONTO_CAJA := caja.Monto 
    FROM caja 
    WHERE caja.Caja = CAJA;

    UPDATE caja 
    SET Monto = @MONTO_CAJA - MONTO 
    WHERE caja.Caja = CAJA;
    
    INSERT INTO movimiento(Fecha_Hora,Descripcion,Monto,Saldo_Caja,Usuario,Caja)
    VALUES(@FECHA,'PAGO DE SERVICIO',MONTO,@MONTO_CAJA,USUARIO,CAJA);

	SELECT @ID_MOVIMIENTO := movimiento.Movimiento
    FROM movimiento
    WHERE movimiento.Fecha_Hora = @FECHA;

	INSERT INTO log(Fecha_Hora,Descripcion,Monto_Movimiento,Movimiento,Usuario)
    VALUES(@FECHA,'PAGO DE SERVICIO',MONTO,@ID_MOVIMIENTO,USUARIO);

	INSERT INTO egreso(Fecha_Hora,Monto,No_recibo,Tipo_Pago,Usuario,Caja)
    VALUES(@FECHA,MONTO,NO_RECIBO,TIPO_PAGO,USUARIO,CAJA);
END$$

DELIMITER ;