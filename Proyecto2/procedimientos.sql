DELIMITER //
CREATE PROCEDURE AGREGAR_ROL_USUARIO(IN NOMBRE VARCHAR(45))
BEGIN
INSERT INTO Rol_Usuario(Nombre) values(NOMBRE);
END//

-- LOGIN
USE `proyecto2bases1`;
DROP procedure IF EXISTS `LOGIN_USUARIO`;

DELIMITER $$
USE `proyecto2bases1`$$
CREATE PROCEDURE `LOGIN_USUARIO` (IN ID INT,IN PASS VARCHAR(250))
BEGIN
SELECT * FROM usuario
WHERE usuario.Usuario = ID AND usuario.Password = PASS;
END$$
DELIMITER ;


-- OBTENER EL ID DEL ROL_USUARIO POR NOMBRE	
DELIMITER //
CREATE PROCEDURE ID_ROL_USUARIO(IN NOMBRE_ROL VARCHAR(50))
BEGIN
SELECT R.ROL_USUARIO FROM ROL_USUARIO R 
WHERE R.NOMBRE = NOMBRE_ROL;
END//
-- CALL ID_ROL_USUARIO('Administrador'); DEVUELVE 1


DROP FUNCTION ID_ROL_USUARIO;
--FUNCION QUE ME DEVUELVE EL ID DE UN ROL EN BASE A SU NOMBRE
DELIMITER //
CREATE FUNCTION ID_ROL_USUARIO(NOMBRE_ROL VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT R.ROL_USUARIO INTO ID FROM ROL_USUARIO R
	WHERE R.NOMBRE = NOMBRE_ROL;
	RETURN ID;
END//

DROP FUNCTION EXISTE_USUARIO;
-- FUNCION QUE ME DEVUELVE -1 SI EL USUARIO NO EXISTE, SI EXISTE ME DEVUELVE SU USUARIO
DELIMITER //
CREATE FUNCTION EXISTE_USUARIO(USUARIO_ID INTEGER)
RETURNS INT(11)
BEGIN
	DECLARE VALOR INT DEFAULT -1;
	SELECT U.USUARIO INTO VALOR FROM USUARIO U
	WHERE U.USUARIO = USUARIO_ID;
	RETURN VALOR;
END//

DROP PROCEDURE CREAR_USUARIO;
-- PROCEDIMIENTO PARA CREAR USUARIO (YA VALIDO QUE NO EXISTA)
DELIMITER //
CREATE PROCEDURE CREAR_USUARIO(NOMBRE_P VARCHAR(100), DIRECCION_P VARCHAR(250), TELEFONO_P VARCHAR(15), CORREO_P VARCHAR(100), USUARIO_P INTEGER, PASSWORD_P VARCHAR(250), ROL_USUARIO_P VARCHAR(45))
BEGIN
	DECLARE ROL_USUARIO_ID INTEGER DEFAULT 0;
	DECLARE EXISTE INTEGER;
    DECLARE RESULTADO INTEGER DEFAULT 0;
    SET EXISTE = EXISTE_USUARIO(USUARIO_P);
    IF EXISTE = -1 THEN
		SET ROL_USUARIO_ID = ID_ROL_USUARIO(ROL_USUARIO_P);
		INSERT INTO USUARIO(USUARIO, NOMBRE, DIRECCION, TELEFONO, CORREO, PASSWORD, ROL_USUARIO)
        VALUES (USUARIO_P, NOMBRE_P, DIRECCION_P, TELEFONO_P, CORREO_P, PASSWORD_P, ROL_USUARIO_ID);
        SET RESULTADO = 1;
	END IF;
    SELECT RESULTADO;
END//

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------- CREAR TIPO_CATEGORIA (comida, bebida)
DELIMITER //
CREATE FUNCTION ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT T.TIPO_CATEGORIA INTO ID FROM TIPO_CATEGORIA T
	WHERE T.NOMBRE = NOMBRE_CATEGORIA;
	RETURN ID;
END//

DELIMITER //
CREATE PROCEDURE CREAR_TIPO_CATEGORIA(NOMBRE_CATEGORIA VARCHAR(45))
BEGIN
	DECLARE EXISTE INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	SET EXISTE = ID_TIPO_CATEGORIA(NOMBRE_CATEGORIA);
	IF EXISTE = -1 THEN
		INSERT INTO TIPO_CATEGORIA(NOMBRE) VALUES (NOMBRE_CATEGORIA);
		SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- CREAR PRODUCTO
DELIMITER // --ME DEVUELVE EL ID DEL PRODUCTO POR NOMBRE LO USO EN EL PROCEDIMIENTO DE ABAJO
CREATE FUNCTION ID_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(100))
RETURNS INT(11)
BEGIN
	DECLARE ID INT DEFAULT -1;
	SELECT P.PRODUCTO INTO ID FROM PRODUCTO P
	WHERE P.NOMBRE = NOMBRE_PRODUCTO;
	RETURN ID;
END//

DELIMITER // -- CREAR PRODUCTO 
CREATE PROCEDURE CREAR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR(100), PRECIO_PRODUCTO DOUBLE)
BEGIN
	DECLARE EXISTE INTEGER;
	DECLARE RESULTADO INTEGER DEFAULT 0;
	SET EXISTE = ID_PRODUCTO(NOMBRE_PRODUCTO);
	IF EXISTE = -1 THEN
		INSERT INTO PRODUCTO(NOMBRE, PRECIO) VALUES (NOMBRE_PRODUCTO, PRECIO_PRODUCTO);
		SET RESULTADO = 1;
	END IF;
	SELECT RESULTADO;
END//
